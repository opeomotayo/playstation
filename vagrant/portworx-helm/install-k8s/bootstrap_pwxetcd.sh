#!/bin/bash


echo "join node to Kubernetes Cluster"
yum install -q -y sshpass >/dev/null 2>&1
sshpass -p "kubeadmin" scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no pwxmaster:/joincluster.sh /joincluster.sh 2>/dev/null
bash /joincluster.sh >/dev/null 2>&1

# echo "create etcd data dir"
# sudo mkdir -p  /data/etcd
# sudo chmod 771 /data/etcd
# sudo chown 1000:1000 /data/etcd

# run sudo -i first

# Join worker node to k8s cluster using the token and discovery-token-ca-cert-hash from master
# kubeadm join ${MASTER_HOSTNAME}:6443 --token ${TOKEN} --discovery-token-ca-cert-hash sha256:${DISCOVERY_TOKEN_CA_CERT_HASH}

# kubeadm token create --print-join-command

# OR

# To create kubeadm join command, please run the following commands:

# Step 1 - Retrieve Token CA Hash:

# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
#     | openssl rsa -pubin -outform der 2>/dev/null \
#     | openssl dgst -sha256 -hex \
#     | sed 's/^.* //'
# This command will provide you public key.

# Step 2 - Retrieve bootstrap Tokens:

# `kubeadm token list`
# This will print all tokens, so copy the token value under TOKEN with the description "The default bootstrap token generated by kubeadm init."

# Step 3 - Creates kubeadm init command:

# Now use following syntax to create join command without creating a new token:

# kubeadm join <ip-address>:6443\
#     --token=<token-from-step-2> \
#     --discovery-token-ca-cert-hash sha256:<ca-hash-from-step-1>
